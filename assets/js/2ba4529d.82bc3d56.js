"use strict";(self.webpackChunkton_docs=self.webpackChunkton_docs||[]).push([[630],{8860:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var a=t(7953);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach(function(n){r(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var g=a.createContext({}),s=function(e){var n=a.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(g.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef(function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,g=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(t),d=r,m=u["".concat(g,".").concat(d)]||u[d]||p[d]||i;return t?a.createElement(m,l(l({ref:n},c),{},{components:t})):a.createElement(m,l({ref:n},c))});function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var g in n)hasOwnProperty.call(n,g)&&(o[g]=n[g]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9300:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=t(811),r=(t(7953),t(8860));const i={title:"Elements",sidebar_position:1,image:"/img/arrayfield/arrayfieldbg.jpg",description:"How to create interactive elements"},l="Adding interactive elements",o={unversionedId:"interface-usage/interactive-elements",id:"interface-usage/interactive-elements",title:"Elements",description:"How to create interactive elements",source:"@site/docs/starlight/interface-usage/interactive-elements.md",sourceDirName:"interface-usage",slug:"/interface-usage/interactive-elements",permalink:"/docs/starlight/interface-usage/interactive-elements",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Elements",sidebar_position:1,image:"/img/arrayfield/arrayfieldbg.jpg",description:"How to create interactive elements"},sidebar:"tutorialSidebar",previous:{title:"Windows",permalink:"/docs/starlight/classes/windows"},next:{title:"Binds",permalink:"/docs/starlight/interface-usage/keybinds"}},g={},s=[{value:"Notifying the user",id:"notifying-the-user",level:2},{value:"Creating a Button",id:"creating-a-button",level:2},{value:"Updating a Button",id:"updating-a-button",level:3},{value:"Creating a Toggle",id:"creating-a-toggle",level:2},{value:"Updating a Toggle",id:"updating-a-toggle",level:3},{value:"Creating a Color Picker",id:"creating-a-color-picker",level:2},{value:"Updating a Color Picker",id:"updating-a-color-picker",level:3},{value:"Creating a Slider",id:"creating-a-slider",level:2},{value:"Updating a Slider",id:"updating-a-slider",level:3},{value:"Creating an Adaptive Input (TextBox)",id:"creating-an-adaptive-input-textbox",level:2},{value:"Creating a Dropdown menu",id:"creating-a-dropdown-menu",level:2},{value:"Updating a Dropdown",id:"updating-a-dropdown",level:3},{value:"General Settings",id:"general-settings",level:2},{value:"Updating an existing element",id:"updating-an-existing-element",level:2},{value:"Check the value of an existing element",id:"check-the-value-of-an-existing-element",level:2}],c={toc:s},u="wrapper";function p({components:e,...n}){return(0,r.yg)(u,(0,a.A)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"adding-interactive-elements"},"Adding interactive elements"),(0,r.yg)("p",null,"If you find any bugs you can contact Arrays by Joining the discord server (",(0,r.yg)("a",{parentName:"p",href:"https://discord.gg/sirius"},"discord.gg/sirius"),") and head to the forum called ArrayField."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Suggest things to add!"),(0,r.yg)("li",{parentName:"ul"},"You can help me fix bugs!"),(0,r.yg)("li",{parentName:"ul"},"and you can help me optimizing the script!"),(0,r.yg)("li",{parentName:"ul"},"You can be credited on the website.")),(0,r.yg)("h2",{id:"notifying-the-user"},"Notifying the user"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua",metastring:'title="A new notification system is coming soon"',title:'"A',new:!0,notification:!0,system:!0,is:!0,coming:!0,'soon"':!0},'ArrayField:Notify({\n   Title = "Notification Title",\n   Content = "Notification Content",\n   Duration = 6.5,\n   Image = 4483362458,\n   Actions = { -- Notification Buttons\n      Ignore = {\n         Name = "Okay!",\n         Callback = function()\n         print("The user tapped Okay!")\n      end\n   },\n },\n})\n')),(0,r.yg)("h2",{id:"creating-a-button"},"Creating a Button"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},"local Button = Tab:CreateButton({\n   Name = \"Button Example\",\n   Interact = 'Click',\n   Callback = function()\n   -- The function that takes place when the button is pressed\n   end,\n})\n")),(0,r.yg)("h3",{id:"updating-a-button"},"Updating a Button"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},'Button:Set("Button Example","Interact")\n')),(0,r.yg)("h2",{id:"creating-a-toggle"},"Creating a Toggle"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},'local Toggle = Tab:CreateToggle({\n   Name = "Toggle Example",\n   CurrentValue = false,\n   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you\'re using configuration saving to ensure no overlaps\n   Callback = function(Value)\n   -- The function that takes place when the toggle is pressed\n   -- The variable (Value) is a boolean on whether the toggle is true or false\n   end,\n})\n')),(0,r.yg)("h3",{id:"updating-a-toggle"},"Updating a Toggle"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},"Toggle:Set(false)\n")),(0,r.yg)("h2",{id:"creating-a-color-picker"},"Creating a Color Picker"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},'local ColorPicker = Tab:CreateColorPicker({\n    Name = "Color Picker",\n    Color = Color3.fromRGB(255,255,255),\n    Flag = "ColorPicker1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you\'re using configuration saving to ensure no overlaps\n    Callback = function(Value)\n        -- The function that takes place every time the color picker is moved/changed\n        -- The variable (Value) is a Color3fromRGB value based on which color is selected\n    end\n})\n')),(0,r.yg)("h3",{id:"updating-a-color-picker"},"Updating a Color Picker"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},"ColorPicker:Set(Color3.fromRGB(255,255,255))\n")),(0,r.yg)("h2",{id:"creating-a-slider"},"Creating a Slider"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},'local Slider = Tab:CreateSlider({\n   Name = "Slider Example",\n   Range = {0, 100},\n   Increment = 10,\n   Suffix = "Bananas",\n   CurrentValue = 10,\n   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you\'re using configuration saving to ensure no overlaps\n   Callback = function(Value)\n   -- The function that takes place when the slider changes\n   -- The variable (Value) is a number which correlates to the value the slider is currently at\n   end,\n})\n')),(0,r.yg)("h3",{id:"updating-a-slider"},"Updating a Slider"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},"Slider:Set(10) -- The new slider integer value\n")),(0,r.yg)("h2",{id:"creating-an-adaptive-input-textbox"},"Creating an Adaptive Input (TextBox)"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},'local Input = Tab:CreateInput({\n   Name = "Input Example",\n   PlaceholderText = "Input Placeholder",\n   NumbersOnly = true, -- If the user can only type numbers. Remove or set to false if none.\n   CharacterLimit = 15, --max character limit. Remove or set to false\n   OnEnter = true, -- Will callback only if the user pressed ENTER while being focused on the the box.\n   RemoveTextAfterFocusLost = false, -- Speaks for itself.\n   Callback = function(Text)\n   -- The function that takes place when the input is changed\n   -- The variable (Text) is a string for the value in the text box\n   end,\n})\n')),(0,r.yg)("h2",{id:"creating-a-dropdown-menu"},"Creating a Dropdown menu"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},'local Dropdown = Tab:CreateDropdown({\n   Name = "Dropdown Example",\n   Options = {"Option 1","Option 2"},\n   CurrentOption = "Option 1" or {"Option 1","Option 3"},\n   MultiSelection = true, -- If MultiSelections is allowed\n   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you\'re using configuration saving to ensure no overlaps\n   Callback = function(Option)\n   -- The function that takes place when the selected option is changed\n   -- The variable (Option) is a string for the value that the dropdown was changed to\n   end,\n})\n')),(0,r.yg)("h3",{id:"updating-a-dropdown"},"Updating a Dropdown"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},"Dropdown:Set(\"Option 2\" or <table>) -- The new option value\n\nDropdown:Refresh({<table>},<selecteds>)\n\nDropdown:Add('test')\nDropdown:Remove('test')\n")),(0,r.yg)("h2",{id:"general-settings"},"General Settings"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"For every element you can add these. (Optional)")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},"local ElementExample\nElementExample = Tab:Create______({\n\nInfo = {\n   Image = '1234567890',\n   Text = 'Description for the prompt'\n},\nSectionParent = Section -- Section it's parented to\n\n})\n")),(0,r.yg)("h2",{id:"updating-an-existing-element"},"Updating an existing element"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},"Element:Destroy() -- Destroy\n\nElement:Visible(<bool>)\n\nElement:Lock(Reason:<string>) -- Lock\nElement:Unlock()  -- Unlock\n")),(0,r.yg)("h2",{id:"check-the-value-of-an-existing-element"},"Check the value of an existing element"),(0,r.yg)("p",null,"To check the current value of an existing element, using the variable, you can do ",(0,r.yg)("inlineCode",{parentName:"p"},"ElementName.CurrentValue"),", if it's a keybind or dropdown, you will need to use ",(0,r.yg)("inlineCode",{parentName:"p"},"KeybindName.CurrentKeybind")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"DropdownName.CurrentOption"),"\nYou can also check it via the flags from You can also check it via the flags from ",(0,r.yg)("inlineCode",{parentName:"p"},"ArrayField.Flags")))}p.isMDXComponent=!0}}]);