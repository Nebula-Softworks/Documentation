"use strict";(self.webpackChunkton_docs=self.webpackChunkton_docs||[]).push([[5874],{7285:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(811),r=(t(7953),t(8860));const i={title:"Elements",sidebar_position:1,image:"/img/luna/banner.png",description:"The Sexiest UI Library For Roblox."},o="Adding Interactive Elements",l={unversionedId:"interactions/elements",id:"interactions/elements",title:"Elements",description:"The Sexiest UI Library For Roblox.",source:"@site/docs/luna/interactions/elements.md",sourceDirName:"interactions",slug:"/interactions/elements",permalink:"/docs/luna/interactions/elements",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Elements",sidebar_position:1,image:"/img/luna/banner.png",description:"The Sexiest UI Library For Roblox."},sidebar:"tutorialSidebar",previous:{title:"Interactions",permalink:"/docs/luna/interactions/"},next:{title:"Binding Keys",permalink:"/docs/luna/interactions/binds"}},s={},c=[{value:"Notifying The User (Notifications)",id:"notifying-the-user-notifications",level:2},{value:"Creating A Button",id:"creating-a-button",level:2},{value:"Creating A Toggle",id:"creating-a-toggle",level:2},{value:"Creating A Color Picker",id:"creating-a-color-picker",level:2},{value:"Creating A Slider",id:"creating-a-slider",level:2},{value:"Creating A Dynamic Input (Textbox)",id:"creating-a-dynamic-input-textbox",level:2},{value:"Creating A Dropdown Menu",id:"creating-a-dropdown-menu",level:2}],u={toc:c},g="wrapper";function p({components:e,...n}){return(0,r.yg)(g,(0,a.A)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"adding-interactive-elements"},"Adding Interactive Elements"),(0,r.yg)("h2",{id:"notifying-the-user-notifications"},"Notifying The User (Notifications)"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},'Luna:Notification({ \n    Title = "Luna Notification Example",\n    Icon = "notifications_active",\n    ImageSource = "Material",\n    Content = "This Is A Preview Of Luna\'s Dynamic Notification System Entailing Estimated/Calculated Wait Times, A Sleek Design, Icons, And A Glassmorphic Look"\n})\n')),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"While You Can Do Element.Callback = function() ... end when creating the element, I Reccomend using :Set() to set the callback after creating Your UI",(0,r.yg)("br",{parentName:"p"}),"\n","It is better to seperate Interface and functionallity however it is your opinion",(0,r.yg)("br",{parentName:"p"}),"\n","All Elements Except Color Picker And Slider Have Description Options, however overusing them can make your UI look ",(0,r.yg)("em",{parentName:"p"},"very")," weird.  ")),(0,r.yg)("h2",{id:"creating-a-button"},"Creating A Button"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},'local Button = Tab:CreateButton({\n    Name = "Button Example!",\n    Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),\n    Callback = function()\n        -- The function that takes place when the button is pressed\n    end\n})\n')),(0,r.yg)("h2",{id:"creating-a-toggle"},"Creating A Toggle"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},'local Toggle = Tab:CreateToggle({\n    Name = "Toggle Example",\n    Description = nil,\n    CurrentValue = false,\n    Callback = function(Value)\n        -- The function that takes place when the toggle is switched\n        -- The variable (Value) is a boolean on whether the toggle is true or false\n    end\n}, "Toggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you\'re using configuration saving to ensure no overlaps\n')),(0,r.yg)("h2",{id:"creating-a-color-picker"},"Creating A Color Picker"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},'local ColorPicker = Tab:CreateColorPicker({\n    Name = "Color Picker Example",\n    Color = Color3.fromRGB(86, 171, 128),\n    Flag = "ColorPicker1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you\'re using configuration saving to ensure no overlaps\n    Callback = function(Value)\n        -- The function that takes place every time the color picker is moved/changed\n        -- The variable (Value) is a Color3fromRGB value based on which color is selected\n    end\n}, "ColorPicker") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you\'re using configuration saving to ensure no overlaps\n')),(0,r.yg)("h2",{id:"creating-a-slider"},"Creating A Slider"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},'local Slider = Tab:CreateSlider({\n    Name = "Slider Example",\n    Range = {0, 200}, -- The Minimum And Maximum Values Respectively\n    Increment = 5, -- Basically The Changing Value/Rounding Off\n    CurrentValue = 100, -- The Starting Value\n    Callback = function(Value)\n        -- The function that takes place when the slider changes\n        -- The variable (Value) is a number which correlates to the value the slider is currently at\n    end\n}, "Slider") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you\'re using configuration saving to ensure no overlaps\n')),(0,r.yg)("h2",{id:"creating-a-dynamic-input-textbox"},"Creating A Dynamic Input (Textbox)"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},'local Input = Tab:CreateInput({\n    Name = "Dynamic Input Example",\n    Description = nil,\n    PlaceholderText = "Input Placeholder",\n    CurrentValue = "", -- the current text\n    Numeric = false, -- When true, the user may only type numbers in the box (Example walkspeed)\n    MaxCharacters = nil, -- if a number, the textbox length cannot exceed the number\n    Enter = false, -- When true, the callback will only be executed when the user presses enter.\n    Callback = function(Text)\n        -- The function that takes place when the input is changed\n        -- The variable (Text) is a string for the value in the text box\n    end\n}, "Input") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you\'re using configuration saving to ensure no overlaps\n')),(0,r.yg)("h2",{id:"creating-a-dropdown-menu"},"Creating A Dropdown Menu"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Currently, The Only Special Type is Player.",(0,r.yg)("br",{parentName:"p"}),"\n","If SpecialType equals Player, then the dropdown options will be the list of players  ")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-lua"},'local Dropdown = Tab:CreateDropdown({\n    Name = "Dropdown Example",\n    Description = nil,\n    Options = {"Option 1","Option 2"},\n    CurrentOption = {"Option 1"},\n    MultipleOptions = false,\n    SpecialType = nil,\n    Callback = function(Options)\n        -- The function that takes place when the selected option is changed\n        -- If MultipleOptions is true then The variable (Options) is a table of strings for the current selected options. Else, it is a string of the currentoption\n    end\n}, "Dropdown") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you\'re using configuration saving to ensure no overlaps\n')))}p.isMDXComponent=!0},8860:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>d});var a=t(7953);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach(function(n){r(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef(function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=c(t),f=r,d=g["".concat(s,".").concat(f)]||g[f]||p[f]||i;return t?a.createElement(d,o(o({ref:n},u),{},{components:t})):a.createElement(d,o({ref:n},u))});function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);